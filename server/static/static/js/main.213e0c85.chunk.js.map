{"version":3,"sources":["components/SelectMovie.tsx","components/PriceTable.tsx","components/Errors.tsx","utils/API.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SelectMovie","props","Form","Row","className","Col","md","Group","Label","Control","as","onChange","newMovieSelected","Object","keys","movies","map","movie","i","value","PriceTable","cinemas","movieDetails","Table","striped","bordered","hover","variant","colSpan","cinema","toUpperCase","Errors","style","color","errorMessage","errorCode","onClick","tryAgain","aria-label","clearError","aria-hidden","margin","API","getMovieList","a","axios","get","result","data","getMovieDetails","post","App","useState","setMovies","setMovieDetails","movieSelected","setMovieSelected","error","setError","setErrorCode","loadingMovies","setLoadingMovies","loadingPrice","setLoadingPrice","useEffect","getMovies","e","console","log","target","Container","Fragment","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.213e0c85.chunk.js","sourcesContent":["// Import necessary libraries\r\nimport React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Col from 'react-bootstrap/Col';\r\n// Functional component for dispaying the movie names\r\nconst SelectMovie = (props: any) => {\r\n  return (\r\n    <form>\r\n      <Form.Row className=\"justify-content-md-center\">\r\n        <Col md=\"auto\">\r\n          <Form.Group>\r\n            <Form.Label>Movies</Form.Label>\r\n            <Form.Control as=\"select\" onChange={props.newMovieSelected}>\r\n              {Object.keys(props.movies).map((movie: string, i: number) => (\r\n                <option key={i} value={movie}>\r\n                  {movie}\r\n                </option>\r\n              ))}\r\n            </Form.Control>\r\n          </Form.Group>\r\n        </Col>\r\n      </Form.Row>\r\n    </form>\r\n  );\r\n};\r\n// Export the component as the default object\r\nexport default SelectMovie;\r\n","// Import necessary libraries\r\nimport React from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\n\r\n// Functional component for dispaying the movie price\r\nconst PriceTable = (props: any) => {\r\n  // Get all the cinema names\r\n  const cinemas = Object.keys(props.movieDetails);\r\n  const movieDetails = props.movieDetails;\r\n  return (\r\n    <div>\r\n      <Table striped bordered hover variant=\"dark\">\r\n        <tbody>\r\n          <tr>\r\n            <th colSpan={2}>\r\n              <b>Price</b>\r\n            </th>\r\n          </tr>\r\n          {cinemas.map((cinema, i) => (\r\n            <tr key={i}>\r\n              <td>{cinema.toUpperCase()}</td>\r\n              <td>${movieDetails[cinema]['Price']}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </Table>\r\n    </div>\r\n  );\r\n};\r\n// Export the component as the default object\r\nexport default PriceTable;\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n// Functional component for displaying errors\r\nconst Errors = (props: any) => {\r\n  return (\r\n    <Col>\r\n      <Row className=\"justify-content-md-center\">\r\n        <p style={{ color: 'red' }}>{props.errorMessage}</p>\r\n      </Row>\r\n      <Row className=\"justify-content-md-center\">\r\n        {props.errorCode === 1 || props.errorCode === 2 ? ( // Display 'Try Again' button if errorCode is 1 or 2\r\n          <button\r\n            style={{ color: 'purple' }}\r\n            onClick={props.tryAgain}\r\n            className=\"close\"\r\n            aria-label=\"Close\"\r\n          >\r\n            Try Again\r\n          </button>\r\n        ) : null}\r\n        <button onClick={props.clearError} className=\"close\" aria-label=\"Close\">\r\n          <span\r\n            aria-hidden=\"true\"\r\n            style={{ color: 'red', margin: '0 0 0 3em ' }}\r\n          >\r\n            Ã—\r\n          </span>\r\n        </button>\r\n      </Row>\r\n    </Col>\r\n  );\r\n};\r\n\r\nexport default Errors;\r\n","import axios from 'axios';\r\n\r\nconst API = {\r\n  getMovieList: async () => {\r\n    const result = await axios.get(`/api/movies`);\r\n    return result.data;\r\n  },\r\n  getMovieDetails: async (movie: { [key: string]: string }) => {\r\n    const result = await axios.post(`/api/movie`, movie);\r\n    return result.data;\r\n  },\r\n};\r\nexport default API;\r\n","import React, { useState, useEffect } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport SelectMovie from './components/SelectMovie';\nimport PriceTable from './components/PriceTable';\nimport Errors from './components/Errors';\nimport API from './utils/API';\nimport './App.css';\n\nfunction App() {\n  const [movies, setMovies] = useState<any>({});\n  const [movieDetails, setMovieDetails] = useState({});\n  const [movieSelected, setMovieSelected] = useState('');\n  const [error, setError] = useState('');\n  const [errorCode, setErrorCode] = useState(0);\n  const [loadingMovies, setLoadingMovies] = useState(true);\n  const [loadingPrice, setLoadingPrice] = useState(true);\n\n  // Get the movie names after the component mounts\n  useEffect(() => {\n    getMovies();\n  }, []);\n\n  useEffect(() => {\n    getMovieDetails();\n  }, [movieSelected]);\n  // Function for getting movie names\n  // This function does not take any arguments\n  const getMovies = async () => {\n    let data: any = {};\n    // Try at most three times to get the data from the backend\n    for (let i = 0; i < 3; i++) {\n      data = await API.getMovieList();\n      if (data['code'] !== 2) {\n        break;\n      }\n    }\n    // If unsuccessful then show error\n    if (data['code'] === 2) {\n      setErrorCode(1);\n      setError('Could not retrive Movies');\n    }\n    // If successfull then then change the state and get movie details\n    else {\n      setErrorCode(0);\n      setError('');\n      setMovies(data['movies']);\n      setMovieSelected(Object.keys(data['movies'])[0]);\n    }\n    setLoadingMovies(false);\n  };\n\n  // Function for getting movie price\n  // This function does not take any arguments\n  const getMovieDetails = async () => {\n    // Set loading to true\n    setLoadingPrice(true);\n    let data;\n    // Try at most three times to get the data from the backend\n    for (let i = 0; i < 3; i++) {\n      data = await API.getMovieDetails({\n        ...movies[movieSelected], // body data type must match \"Content-Type\" header\n      });\n\n      if (data['code'] !== 2) {\n        break;\n      }\n    }\n    // If unsuccessful then show error\n    if (data['code'] === 2) {\n      setErrorCode(2);\n      setError('Could not retrive price');\n    }\n    // If successfull then then change the state\n    else {\n      setError('');\n      setMovieDetails(data['cinemas']);\n    }\n    setLoadingPrice(false);\n  };\n\n  // Function for updating the state with the selected movie\n  const newMovieSelected = async (e: any) => {\n    console.log(e.target.value);\n    setMovieSelected(e.target.value);\n  };\n  // Function for clearing errors\n  const clearError = (e: any) => {\n    setError('');\n  };\n  // Function for trying to fetch data from the client again\n  const tryAgain = async (e: any) => {\n    if (errorCode === 1) await getMovies();\n    else if (errorCode === 2) await getMovieDetails();\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Container>\n          {error ? ( // If showErrors is true then render only the error component\n            <Errors\n              errorMessage={error}\n              errorCode={errorCode}\n              clearError={clearError}\n              tryAgain={tryAgain}\n            /> // If showErrors is false then diplay the other components\n          ) : loadingMovies ? (\n            <p>Loading</p> // Show loading message while fetching movies\n          ) : (\n            <React.Fragment>\n              <Container>\n                <h1 style={{ margin: '50px' }}>Compare Movie Price</h1>\n              </Container>\n              <Container>\n                <SelectMovie\n                  newMovieSelected={newMovieSelected}\n                  movies={movies}\n                />\n              </Container>\n              <Container>\n                {loadingPrice ? (\n                  <p>Getting Price</p> // Show 'Getting Price' message while fetching price\n                ) : (\n                  <PriceTable movieDetails={movieDetails} />\n                )}\n              </Container>\n            </React.Fragment>\n          )}\n        </Container>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}